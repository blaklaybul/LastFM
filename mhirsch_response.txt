1. Process:
	- Data was requested from LastFM's api, using the following methods:
		Top Artists method: http://www.last.fm/api/show/chart.getTopArtists
		Top Tags method: http://www.last.fm/api/show/artist.getTopTags
	
	- Raw artists and tags data were stored in pandas dataframes, on which further aggregation and merging was performed. 
	
	- The first step was to get all pairs of tags for each artist. Since LastFM gives us the number of times each tag is associated with an artist, joining ArtistsWithTags dataframe on itself gave us a list of all possible tag pairs per artist. I took the minimum of the two tag counts to be the measure for how often the tags appeared together on a single artist.

	- From here, I grouped by all tag pairs, summing up the number of times they appeared across all artists.

	- Next, I created a new dataframe in which to perform the analysis. For each pair, I calculated the following information:
		- What percent of all pairs this pair represented
		- The pairwise percents for each tag. That is, what percent of all tags that tag_1 appears in and what percent of all tags that tag_2 appears in this pair represents.
		- I then took the product of these percents and multiplied this by the percent obtained in the first step.
		- this left me with a score that was quite low because of all the percentages that were taken, so I scaled this up by a factor of 10^8 to have more intuitive numbers.
	
	- The process can intuitively be thought of as follows:
		- for each pair, what is the likelihood of this pair occurring? (pairs/total)
		- for each tag in the pair, what is the likelihood of it occuring in a pair? (pairs/x) and (pairs/y)
		- score: (pairs/total)*(pairs/x)*(pairs/y)*factor 

2. Outcomes:
	- Tags with low co-occurrence had low scores since we took into account what percentage of all pairs was represented by a single pair. So, even though two tags may only appear with each other, if they are rare tags, they will have a low score.
	
	- that being said, when searching by a single tag, the ordering of scores of pairs containing that tag is meaningful. For example, having a look at some pairs containing "shoegaze" (file also attached), we note that the score is not a direct reflection of the number of co-occurrences, but rather an interplay between "pairs", "x", "y", and "total":

		tag_1		tag_2			pairs 	x		y		total	score
		shoegaze	dream pop		501		6259	10987	2435982	75.06803134
		shoegaze	indie			679		6259	122729	2435982	16.72950538
		shoegaze	post-rock		208		6259	5761	2435982	10.2450269
		shoegaze	post-punk		222		6259	10731	2435982	6.687129014
		shoegaze	psychedelic		253		6259	17611	2435982	6.031127643
		shoegaze	indie rock		357		6259	56197	2435982	5.310219705
		shoegaze	alternative		446		6259	114909	2435982	5.063741236
		shoegaze	ethereal		121		6259	2472	2435982	4.700332903
		shoegaze	ambient			180		6259	19120	2435982	2.000555485
		shoegaze	experimental	210		6259	33393	2435982	1.818961137

3. Limitations:
	- My JSON call to get tags for artists is very slow, and and don't believe it is the proper way of doing a JSON request.

	- If given more time I would ensure to properly index all of the dataframes. In particular, a master_tag dataframe would be created with a tag_id, tag_name, and count column. While the aggregations were speedy in my script, having IDs references instead of character strings would speed up the code.

	- With a more intimate knowledge of python best practices and work with pandas, this could be built out to be a much more compelling script including some of the ideas listed below.


4. Ideas:
	- Similarity between artists: For each artist we could create a vector of tags that defines them, with each component weighted to reflect the count of each tag associated with the artist. For other artists, we could build a vector with the same tags (resulting in different weights) and compute the distance between their tag vectors.
	
	- This naive scoring compared decently to LastFm's getSimilarTag's method, however I think they benefit from a much larger sample. The rankings seem to agree fairly well for tags that appeared quite frequently like "rock" and "rap", but lack of volume brings down the scores in my calculation. Also, it appears that LastFMs algorithm for determining similarity suppresses more frequently occuring co-tags. For example, "indie" is less highly ranked on tags similar to "shoegaze", since "indie" is a very popular tag.
	
	- I think that this data set could be more interesting if we made it such that scores were antisymmetric. Introducing an order to the pairs would allow one to see one tag's influence over the other's. Tracking changes in these influence scores could allow for deeper insight into how different genres are evolving, and what other genres are influencing them most.